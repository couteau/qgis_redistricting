# -*- coding: utf-8 -*-
"""
/***************************************************************************
 DockRedistringToolbox
            DockWidget with tools for painting districts

 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
 (and then heavily modified)
                             -------------------
        begin                : 2022-01-15
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Cryptodira
        email                : stuart@cryptodira.org
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from typing import Optional
from qgis.PyQt.QtCore import Qt, QObject, QVariant, QAbstractTableModel, QModelIndex

from .Plan import RedistrictingPlan
from .DeltaList import DeltaList


class DeltaListModel(QAbstractTableModel):
    def __init__(self, plan: RedistrictingPlan, parent: Optional[QObject] = ...) -> None:
        super().__init__(parent)
        self._delta = None
        self.createDelta(plan)

    def setPlan(self, plan: RedistrictingPlan):
        self.createDelta(plan)

    def createDelta(self, plan: RedistrictingPlan):
        if not plan:
            self._delta = None
        elif not self._delta or self._delta.plan != plan:
            self.beginResetModel()
            self._delta = DeltaList(plan, self)
            self._delta.updating.connect(self.startUpdate)
            self._delta.updateComplete.connect(self.endUpdate)
            self._delta.updateTerminated.connect(self.cancelUpdate)
            self.endResetModel()

    def columnCount(self, parent: QModelIndex = ...) -> int:  # pylint: disable=unused-argument
        return len(self._delta) if self._delta else 0

    def rowCount(self, parent: QModelIndex = ...) -> int:  # pylint: disable=unused-argument
        return self._delta.fieldCount() if self._delta else 0

    def data(self, index: QModelIndex, role: int = ...):
        if self._delta:
            row = index.row()
            col = index.column()

            if role in {Qt.DisplayRole, Qt.EditRole}:
                return self._delta[row, col]

        return QVariant()

    def headerData(self, section: int, orientation: Qt.Orientation, role: int = ...):
        if self._delta:
            if role == Qt.DisplayRole:
                return self._delta[section].name if orientation == Qt.Horizontal \
                    else self._delta.heading(section)
            if role == Qt.TextAlignmentRole:
                return int(Qt.AlignVCenter | Qt.AlignRight) if orientation == Qt.Vertical else int(Qt.AlignCenter)

        return QVariant()

    def startUpdate(self):
        self.beginResetModel()

    def endUpdate(self):
        self.endResetModel()

    def cancelUpdate(self):
        self.endResetModel()
